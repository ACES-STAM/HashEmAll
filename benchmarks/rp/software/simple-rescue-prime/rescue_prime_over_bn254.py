# Based on `rescue_prime_instance_bn256` implementation in ZKFriendlyHashZoo project.


import sys

from field import PrimeField


if sys.version_info < (3, 9):
    raise RuntimeError("must use Python version 3.9 or higher")


STATE_SIZE = 3

CAPACITY_SIZE = 1
IDX_CAPACITY_BEGIN = 0

RATE_SIZE = 2
IDX_RATE_BEGIN = 1

DIGEST_SIZE = 1
IDX_DIGEST_BEGIN = 1

NUM_ROUNDS = 14

ALPHA = 5
INV_ALPHA = 0x26B6A528B427B35493736AF8679AAD17535CB9D394945A0DCFE7F7A98CCCCCCD


field = PrimeField(0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001)

ROUND_CONSTANT_1 = [
    [
        0x241214b64e37a42dddc49216b6433fe75e4af3533a8c8961def18b459420ce96,
        0x149e9522e80164b39561a6d532ed480ddb16db399fce8f2b72c8640bed14edd8,
        0x16e6151eb7f6065df49647b709fcde486776be1e372155e42ce9c91b49342af3,
    ],
    [
        0x03546ef6134d6bcfac31bfdcc211836203a559b0e04b314ff40642b72b1f22b9,
        0x15392eceb2d870dcedce619bd4a4baf5140dfe1390fcb22d89787f5631f4756d,
        0x238fa99e483edf2d219d37dcf824e86ed4fc7b384a4fecc8a0f5c8109fa0d0e7,
    ],
    [
        0x0d7bc0cc3063a9d7c2b85c953ac460a79e70b3ac3fef6f7952658a59cce56cce,
        0x205aa50ee2dc005f22a93fd5070636e20406843871f8eb4bfce2845e060df6c1,
        0x0115db7f2494ba498f5168807e455811e55f92d6b48117dd75791b94b0d2e42f,
    ],
    [
        0x2c7c456a9d460f23f299aa325599598947fb9289a8d9743efa621cea723cfb8b,
        0x04f971670f113c12f3e59a3bf8c32a9d71526bd9ff1ca7933bcf42f57cbe9142,
        0x1ba8e88c0c59e257fce11428c76c7d5d35b5a773d6c7da2609869306e43d0959,
    ],
    [
        0x0a0f24024b1fb9b5afd2997d5e3f1793f99e3f0bccb54dadefddd77b7a42a058,
        0x024e7d70b40332e5e0d5c790f244ce1685c3062776a792d6144385d1031c6a76,
        0x0f3e9d716963356b6f4d6c59b5ba5ddccbe583b556a5466e6a8f2d444191542b,
    ],
    [
        0x18d28d7bea35db5e6ddacd576186bc4aae4485f623b49fe505a94054ba75ef0e,
        0x0cc59f4f8d39b3ac4f2567bc56eb2c7e8da5550a0c04818b42fe695f8f285c20,
        0x1f1ef239cea48c9aaafcb216b0e08e5fd68cbea8eda24235a6f0ce2c85609659,
    ],
    [
        0x16019c9451b62d42177d2cacd260a15f0de9cdc9ccb26a892bb8d37ac61ce9bf,
        0x2323a90bb17a61acbca2205486b44b706cc90fcb4e9900d2970f0df02575c553,
        0x000c38d85cf32503c63b8ac156492b25f550ad2afddfb92c9c31ac4b6603e304,
    ],
    [
        0x1c9cb3cad66a96d4f9131760344e7093ae4358bac852f6e352ee345e0dcdf684,
        0x11cb60a422f7ffcf0a8de27dddd490b6fd93606c37dffc6e8aea256c157fae69,
        0x23ff8be08521aaa5a6ea6c7fd2c7526afca282b354ee7a559099190e072e3ce4,
    ],
    [
        0x1ab35e2f964a0c9641ae01e04747e2a686c76da44ce42579c58c38235ad2eb0c,
        0x18de353617b2891c392d9f3b6386d74a81f5c4468eebfe8c73200114972fe5b1,
        0x180b471ce6b043a9401cdd596456af7c67b2b800474bf4fc6932e2edbc62cfbf,
    ],
    [
        0x134dc23093822f920d9c9301b363b224d4fe4f977e11e7a1393244cdfc88ce1a,
        0x0a2b2d1d9cc5de93ea90b33dcdbf156c000b753b60db180823e717d2c49d6910,
        0x0091ceffd5b51b15c3b608dd743c9a36eb2ffb6ef374011eb5d0ed60f1ff2b49,
    ],
    [
        0x2e2561cf8692bdcb2136b5038feca8b05e379a4c6ad4d0f5b4b5af8dc94dc1f7,
        0x17310c87b9b20d078bb4ea19756cd049afb5dec9734e9745dccd521b007258e1,
        0x0093cb39757463eb403a16afbec58d3fe5bb0db9a0e69b39e23272fe5420b828,
    ],
    [
        0x0bb790131ed126376809f10b87f7efcd21502e65311c2960f54b0a6953446419,
        0x01957d4149e870b8124d9da7c079dbe78471228feba9d21b755d2b76b74e2d0d,
        0x049d840bbb1007263ec4103d9c8fefe67581bfd5cedf6a85d2c1b13613d99b87,
    ],
    [
        0x0dc6f6cc8d865f25ed467bbf95bbd398dff0d10ae52e2a30be6c8e82344b3802,
        0x2a72d90ddf392777d2a1977eeb51cb50aee2e9e8b7b7d4c94fb141de94b1ed69,
        0x00160b8013f8d967f070ff7f978763d30f9f50208558cec97a5e3bb4af933a2d,
    ],
    [
        0x2061ba6a4ad4076d895e99f6210c642f745e1e0c103d5407dab83cda773b7fc3,
        0x00e536b883f7c592c1f6d648bdffa05fd559f399a0a415c7620c16ee8583bbd1,
        0x2d782ff8b4ff168929034808ce0a8b6493d302444e7777d4aff02f55a3b56769,
    ]
]

ROUND_CONSTANT_2 = [
    [
        0x0B29463B35FC98CA03BAAE98F5D4F251D38E091FA179FBE1F10E77E0F46399CD,
        0x1A892F66364B75798CEBE8E3EF3BF830F85ECB833F3B1023F4E90D2FC67A88D9,
        0x27AF8EF16EB7A0535A73AAA4273EA0811B95B6F288E3B18E91EA29857A35F4DF,
    ],
    [
        0x00BF1355BB7CFB01C74F7188922E6120A8C24B612471653B59AC1AFF07D44F46,
        0x16AF47292BAF23E76016F26496F6C73D3C38F4B1791F3B8762F7F15B89ACC9A3,
        0x105A902EAFAC24043E91C89164E510E1D7D1948C5660B56C7F6F7672DBE60B75,
    ],
    [
        0x116EE19EBA3B6F6F24D41133D4CC4D6B22D940B45256D7FB55F7A2BBC56FE585,
        0x1DEF0328023519E98741D1BF42429A1DDF9853579B3A59424184C12D0137C33C,
        0x005746D2203F013E44AC7CD2CA4F7025881A574932E81EE15125558032CA2D9B,
    ],
    [
        0x00762D2D87B03A76A8851F6F5A69D3A6078A8BE5028F962098DA7BE06012A7BC,
        0x23D7C7A4017398EF348DBB6B4D9F531B0757AD6050704BC7641BE4492CF3CA0F,
        0x0A9CCCD695EE8AD147AA245D3D7A30CFC0E0AB6072910D02CC00CF978CA0A89E,
    ],
    [
        0x1FB906FAD59ABC852DF6BAD6E47237DE825EC36BA13EFC46F29A4C8DD680BCAA,
        0x282FE85EC5D4B5BF5AC6DCE1E237E078D107B69B35FE263E295B41A707CB9B42,
        0x0DEE9F78D30EBBCABC8DC0EF1BDA1E0A665C218FC9E1D6A1446CC9C8A765015A,
    ],
    [
        0x19832475410C38053D6B7085501EDF215741207E4BC9548AFE8B4B179B9FA253,
        0x28F1800567DAEDAA3673EAA304D90334D616DCC9B6A093DF07FAB20251D2F27A,
        0x293042C65E37A4EFB3190692BC75C5470076513C77B87B9D3535C10F1C5ED68F,
    ],
    [
        0x2C69E902753E9B71445F40582287929E6379737B578A73B8B6AF949D775D880E,
        0x046305445D6DEF7EA13E73F364B5BB76A2480FCAF9E806BD21DC414EC11B7E48,
        0x189B2620678F5309EE12FFF3424A7D65B75A2F674D53DA1D594266F477AFE57F,
    ],
    [
        0x0D4ADE548E38A7C4A1976BE0CF50CAC82E37F202E99413930834A5E117B34276,
        0x14BC69CEF73FE0BB617B6D21DD01CD7F635B169A8B975B8562D9D8460C1AADE8,
        0x0DB842E9B71B286915EFA0DE5E03F8A0378B72B7A71F0C2135E79866D3D6F528,
    ],
    [
        0x23153CCD41FB458E2F33C20B8CE49B8985836A26BB06C39F0A96D6BBBC0301BA,
        0x1416013ABC7D9B53AEF83185611F5617ABA83BFDDA11DD489D77CD2012E8A8A7,
        0x220A789DC01B985C3A137384C37D0B5AD86B7F07F6E0224C66FC0798E9F6459C,
    ],
    [
        0x024DE554062063C0168C82DDB650EA09B415C7405D5F3B1430F6EEEC0AD3FB0D,
        0x2C450F23635A10C72B8FC7F36750643A42F62453CD501C83C6C90D16D7EEFC57,
        0x2F14C4092EB0A874C85AE64B4D18BBA47970CA3DA4D422629CEB040E62B14096,
    ],
    [
        0x0B057A4CB37D03A96CDB20C1F9A96EEA600FCD17D2479B228FE9E7EA4BEFD3C6,
        0x189552E5EB3AC601A687CAE3675CD9C2F72B1A41BCAEE2835C03152078590107,
        0x0518B70350BAAC601B679ACA4238937870F9578567CE3696F81BEE468FD7024E,
    ],
    [
        0x16663BD42A4D96E3B69EDCF1A11950B22CEE06402894FDF330128952E31DD397,
        0x25299E3A923FC0C38EC4D2421077C7E547D9CBD7F9FC89D2915DE94B188417C4,
        0x2A238002A34A8C72B397392F399AF21E0E0F7FCC05506E6B874DD3F70BBA4B3B,
    ],
    [
        0x12FA0490FF006E46E16E8AACCBA07CD2BA266BFFF29BC68449E007349A888207,
        0x23DDF606BB111B9B21AFC99904FA6F75FE37FCE69A7E1F7FD5E3D1292BA7E7E0,
        0x29B2EC689B6F2ED0DBF269C777609432B038A431D432DE96688047EDC088C1A4,
    ],
    [
        0x2F6EAD5D361BFD4E9986132970AFCB85B2F4B4538A6F70BBC75E0F0034C8761A,
        0x2AC8B859E3DEFF5E0036D4BB0F0393BC9311336FFEA5122CF5E380EBB82D3B55,
        0x0A1E0608A08CDF1BAA58DB694C6F73B8D6D598EA447DD6BDED6FEA2470B38D0A,
    ],
]

MDS_MATRIX = [
    [
        0x000000000000000000000000000000000000000000000000000000000000007D,
        0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593EFFFFF66,
        0x000000000000000000000000000000000000000000000000000000000000001F,
    ],
    [
        0x0000000000000000000000000000000000000000000000000000000000000F23,
        0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593EFFFEDB9,
        0x0000000000000000000000000000000000000000000000000000000000000326,
    ],
    [
        0x000000000000000000000000000000000000000000000000000000000001898E,
        0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593EFFE2722,
        0x0000000000000000000000000000000000000000000000000000000000004F52,
    ],
]


def hash(elements: list[int]) -> list[int]:
    """Hash a sequence of field elements."""

    assert len(elements) < 2**64

    state: list[int] = [0] * STATE_SIZE
    state[IDX_CAPACITY_BEGIN] = len(elements)

    i = 0
    for elem in elements:
        state[IDX_RATE_BEGIN + i] = field.add(state[IDX_RATE_BEGIN + i], elem)
        i += 1
        if i == RATE_SIZE:
            i = 0
            apply_sponge_permutation(state)

    if i > 0:
        apply_sponge_permutation(state)

    return state[IDX_DIGEST_BEGIN : IDX_DIGEST_BEGIN + DIGEST_SIZE]


def apply_sponge_permutation(state: list[int]) -> None:

    for i in range(0, NUM_ROUNDS):
        apply_round(state, i)


def apply_round(state: list[int], round: int) -> None:

    apply_sbox(state)
    apply_mds(state)
    apply_constants(state, ROUND_CONSTANT_1[round])

    apply_inv_sbox(state)
    apply_mds(state)
    apply_constants(state, ROUND_CONSTANT_2[round])


def apply_sbox(state: list[int]) -> None:

    for i in range(len(state)):
        state[i] = field.exp(state[i], ALPHA)


def apply_inv_sbox(state: list[int]) -> None:

    for i in range(len(state)):
        state[i] = field.exp(state[i], INV_ALPHA)


def apply_mds(state: list[int]) -> None:

    result = [0] * STATE_SIZE
    for i in range(STATE_SIZE):
        for j in range(STATE_SIZE):
            temp = field.mul(state[j], MDS_MATRIX[i][j])
            result[i] = field.add(result[i], temp)

    state[:] = result


def apply_constants(state: list[int], round_constants: list[int]) -> None:

    for i in range(len(state)):
        state[i] = field.add(state[i], round_constants[i])


if __name__ == "__main__":

    msg = [0, 1, 2]
    state = msg[:]
    apply_sponge_permutation(state)
    assert state == [
        0xdc30ccd5d64e5bea071e99087ef86d433eb156aa0500a823298f9bb05328bd2,
        0x189893368d5815608c56e44cc67f7e821e093bb6254a0553f9ff69f4d99debc8,
        0x1acafc768221448ebc51fa2cd1e3c9b2044a0c04f3509d833b0a82c7e3462610,
    ]
