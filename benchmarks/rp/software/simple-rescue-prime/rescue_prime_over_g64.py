# Based on `rp64_256` implementation in winterfell project.


import sys

from field import PrimeField


if sys.version_info < (3, 9):
    raise RuntimeError("must use Python version 3.9 or higher")


STATE_SIZE = 12

CAPACITY_SIZE = 4
IDX_CAPACITY_BEGIN = 0

RATE_SIZE = 8
IDX_RATE_BEGIN = 4

DIGEST_SIZE = 4
IDX_DIGEST_BEGIN = 4

NUM_ROUNDS = 7

ALPHA = 7
INV_ALPHA = 10540996611094048183


field = PrimeField(0xFFFFFFFF00000001)  # modulus = 2**64 - 2**32 + 1

ROUND_CONSTANT_1 = [
    [
        13917550007135091859,
        16002276252647722320,
        4729924423368391595,
        10059693067827680263,
        9804807372516189948,
        15666751576116384237,
        10150587679474953119,
        13627942357577414247,
        2323786301545403792,
        615170742765998613,
        8870655212817778103,
        10534167191270683080,
    ],
    [
        14572151513649018290,
        9445470642301863087,
        6565801926598404534,
        12667566692985038975,
        7193782419267459720,
        11874811971940314298,
        17906868010477466257,
        1237247437760523561,
        6829882458376718831,
        2140011966759485221,
        1624379354686052121,
        50954653459374206,
    ],
    [
        16288075653722020941,
        13294924199301620952,
        13370596140726871456,
        611533288599636281,
        12865221627554828747,
        12269498015480242943,
        8230863118714645896,
        13466591048726906480,
        10176988631229240256,
        14951460136371189405,
        5882405912332577353,
        18125144098115032453,
    ],
    [
        6076976409066920174,
        7466617867456719866,
        5509452692963105675,
        14692460717212261752,
        12980373618703329746,
        1361187191725412610,
        6093955025012408881,
        5110883082899748359,
        8578179704817414083,
        9311749071195681469,
        16965242536774914613,
        5747454353875601040,
    ],
    [
        13684212076160345083,
        19445754899749561,
        16618768069125744845,
        278225951958825090,
        4997246680116830377,
        782614868534172852,
        16423767594935000044,
        9990984633405879434,
        16757120847103156641,
        2103861168279461168,
        16018697163142305052,
        6479823382130993799,
    ],
    [
        13957683526597936825,
        9702819874074407511,
        18357323897135139931,
        3029452444431245019,
        1809322684009991117,
        12459356450895788575,
        11985094908667810946,
        12868806590346066108,
        7872185587893926881,
        10694372443883124306,
        8644995046789277522,
        1422920069067375692,
    ],
    [
        17619517835351328008,
        6173683530634627901,
        15061027706054897896,
        4503753322633415655,
        11538516425871008333,
        12777459872202073891,
        17842814708228807409,
        13441695826912633916,
        5950710620243434509,
        17040450522225825296,
        8787650312632423701,
        7431110942091427450,
    ],
]

ROUND_CONSTANT_2 = [
    [
        7989257206380839449,
        8639509123020237648,
        6488561830509603695,
        5519169995467998761,
        2972173318556248829,
        14899875358187389787,
        14160104549881494022,
        5969738169680657501,
        5116050734813646528,
        12120002089437618419,
        17404470791907152876,
        2718166276419445724,
    ],
    [
        2485377440770793394,
        14358936485713564605,
        3327012975585973824,
        6001912612374303716,
        17419159457659073951,
        11810720562576658327,
        14802512641816370470,
        751963320628219432,
        9410455736958787393,
        16405548341306967018,
        6867376949398252373,
        13982182448213113532,
    ],
    [
        10436926105997283389,
        13237521312283579132,
        668335841375552722,
        2385521647573044240,
        3874694023045931809,
        12952434030222726182,
        1972984540857058687,
        14000313505684510403,
        976377933822676506,
        8407002393718726702,
        338785660775650958,
        4208211193539481671,
    ],
    [
        2284392243703840734,
        4500504737691218932,
        3976085877224857941,
        2603294837319327956,
        5760259105023371034,
        2911579958858769248,
        18415938932239013434,
        7063156700464743997,
        16626114991069403630,
        163485390956217960,
        11596043559919659130,
        2976841507452846995,
    ],
    [
        15090073748392700862,
        3496786927732034743,
        8646735362535504000,
        2460088694130347125,
        3944675034557577794,
        14781700518249159275,
        2857749437648203959,
        8505429584078195973,
        18008150643764164736,
        720176627102578275,
        7038653538629322181,
        8849746187975356582,
    ],
    [
        17427790390280348710,
        1159544160012040055,
        17946663256456930598,
        6338793524502945410,
        17715539080731926288,
        4208940652334891422,
        12386490721239135719,
        10010817080957769535,
        5566101162185411405,
        12520146553271266365,
        4972547404153988943,
        5597076522138709717,
    ],
    [
        18338863478027005376,
        115128380230345639,
        4427489889653730058,
        10890727269603281956,
        7094492770210294530,
        7345573238864544283,
        6834103517673002336,
        14002814950696095900,
        15939230865809555943,
        12717309295554119359,
        4130723396860574906,
        7706153020203677238,
    ],
]

MDS_MATRIX = [
    [7, 23, 8, 26, 13, 10, 9, 7, 6, 22, 21, 8],
    [8, 7, 23, 8, 26, 13, 10, 9, 7, 6, 22, 21],
    [21, 8, 7, 23, 8, 26, 13, 10, 9, 7, 6, 22],
    [22, 21, 8, 7, 23, 8, 26, 13, 10, 9, 7, 6],
    [6, 22, 21, 8, 7, 23, 8, 26, 13, 10, 9, 7],
    [7, 6, 22, 21, 8, 7, 23, 8, 26, 13, 10, 9],
    [9, 7, 6, 22, 21, 8, 7, 23, 8, 26, 13, 10],
    [10, 9, 7, 6, 22, 21, 8, 7, 23, 8, 26, 13],
    [13, 10, 9, 7, 6, 22, 21, 8, 7, 23, 8, 26],
    [26, 13, 10, 9, 7, 6, 22, 21, 8, 7, 23, 8],
    [8, 26, 13, 10, 9, 7, 6, 22, 21, 8, 7, 23],
    [23, 8, 26, 13, 10, 9, 7, 6, 22, 21, 8, 7],
]


def hash(elements: list[int]) -> list[int]:
    """Hash a sequence of field elements."""

    assert len(elements) < 2**64

    state: list[int] = [0] * STATE_SIZE
    state[IDX_CAPACITY_BEGIN] = len(elements)

    i = 0
    for elem in elements:
        state[IDX_RATE_BEGIN + i] = field.add(state[IDX_RATE_BEGIN + i], elem)
        i += 1
        if i == RATE_SIZE:
            i = 0
            apply_sponge_permutation(state)

    if i > 0:
        apply_sponge_permutation(state)

    return state[IDX_DIGEST_BEGIN : IDX_DIGEST_BEGIN + DIGEST_SIZE]


def apply_sponge_permutation(state: list[int]) -> None:

    for i in range(0, NUM_ROUNDS):
        apply_round(state, i)


def apply_round(state: list[int], round: int) -> None:

    apply_sbox(state)
    apply_mds(state)
    apply_constants(state, ROUND_CONSTANT_1[round])

    apply_inv_sbox(state)
    apply_mds(state)
    apply_constants(state, ROUND_CONSTANT_2[round])


def apply_sbox(state: list[int]) -> None:

    for i in range(len(state)):
        state[i] = field.exp(state[i], ALPHA)


def apply_inv_sbox(state: list[int]) -> None:

    for i in range(len(state)):
        state[i] = field.exp(state[i], INV_ALPHA)


def apply_mds(state: list[int]) -> None:

    result = [0] * STATE_SIZE
    for i in range(STATE_SIZE):
        for j in range(STATE_SIZE):
            temp = field.mul(state[j], MDS_MATRIX[i][j])
            result[i] = field.add(result[i], temp)

    state[:] = result


def apply_constants(state: list[int], round_constants: list[int]) -> None:

    for i in range(len(state)):
        state[i] = field.add(state[i], round_constants[i])


def _int_to_mont(x: int) -> int:
    """
    Convert the field element `x` in canonical form to Montgomery form.

    Also perform a modular reduction, in case `x` is an integer (upto) 128
    bits wide.

    Field modulus is exactly `2**64 - 2**32 + 1`.

    """

    assert x >= 0

    R2 = 0xFFFFFFFE00000001
    x = x * R2

    # Follows the logic in func `mont_red_cst` in winterfell project.
    # https://github.com/facebook/winterfell/blob/9f21cf426cae080f8871ec2043573ce5652dad72/math/src/field/f64/mod.rs#L708

    MASK_64 = (1 << 64) - 1

    xl = x & MASK_64
    xh = (x >> 64) & MASK_64

    a = (xl + (xl << 32)) & MASK_64
    e = 1 if a < xl else 0

    b = (a - (a >> 32) - e) & MASK_64

    r = (xh - b) & MASK_64
    c = 1 if r > xh else 0

    return (r - ((-c) % (2**32))) & MASK_64


def _mont_to_int(x: int) -> int:
    """
    Convert the field element `x` in Montgomery form to canonical form.

    Field modulus is exactly `2**64 - 2**32 + 1`.

    """

    assert x >= 0 and x < (2**64 - 2**32 + 1)

    # Follows the logic in func `mont_to_int` in winterfell project.
    # https://github.com/facebook/winterfell/blob/9f21cf426cae080f8871ec2043573ce5652dad72/math/src/field/f64/mod.rs#L725

    MASK_64 = (1 << 64) - 1

    a = (x + (x << 32)) & MASK_64
    e = 1 if a < x else 0

    b = (a - (a >> 32) - e) & MASK_64

    r = (-b) & MASK_64
    c = 1 if r > 0 else 0

    return (r - ((-c) % (2**32))) & MASK_64


if __name__ == "__main__":

    msg = [1, 2, 3, 4]
    digest = hash(msg)
    print(digest)
